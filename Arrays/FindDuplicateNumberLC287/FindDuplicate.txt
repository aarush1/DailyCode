Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.



Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3


Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.

Thoughts before coding :-

-> Create a frequency array and solve.

Answer:-
Three Approaches are possible:

1. Sort the Array and compare i  with i+1th element in the loop.
2. Frequency array initialize extra array to all zero increase count at the original arrays index and the see if any
   index has a value of greater than 1.
3. Cycle approach take two pointers slow and fast star from nums[0] then go to index equals to value at nums[0] increase
   slow by 1 and fast by 2 till they collide then again reset fast to nums[0] and again check collision and return either


Time Complexity:-

Approach 1. O(nlogn)
Approach 2. O(N)
Approach 3. O(N) and constant space.








